package com.BigData.MapReduceAnalysis;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.client.Mutation;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
import org.apache.hadoop.hbase.mapreduce.TableReducer;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

/**
 * This is a map-reduce program to calculate a city trend based on the % of
 * available listings for a particular month.
 * 
 * @author akashnagesh
 *
 */
public class CityTrend {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		try {
			Configuration conf = new Configuration();
			Job job = Job.getInstance(conf, "trend");
			job.setJarByClass(CityTrend.class);
			job.setMapperClass(TrendMapper.class);
			job.setReducerClass(TrendReducer.class);
			// job.setCombinerClass(ReducerWordCount.class);
			job.setMapOutputKeyClass(Text.class);
			job.setMapOutputValueClass(IntWritable.class);
			job.setOutputKeyClass(Text.class);
			job.setOutputValueClass(FloatWritable.class);

			FileInputFormat.addInputPath(job, new Path(args[0]));
			FileOutputFormat.setOutputPath(job, new Path(args[1]));

			// cleanUpOutputDiectory(conf, args[1]);
			System.exit(job.waitForCompletion(false) ? 0 : 1);
		} catch (InterruptedException e) {
			System.out.println(e);
		} catch (ClassNotFoundException e) {
			System.out.println(e);
		}

	}

	protected static class TrendMapper extends Mapper<Object, Text, Text, IntWritable> {

		Map<Integer, String> monthMapper = new HashMap<>();

		@Override
		protected void setup(Mapper<Object, Text, Text, IntWritable>.Context context)
				throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			monthMapper.put(1, "Jan");
			monthMapper.put(2, "Feb");
			monthMapper.put(3, "Mar");
			monthMapper.put(4, "Apr");
			monthMapper.put(5, "May");
			monthMapper.put(6, "Jun");
			monthMapper.put(7, "Jul");
			monthMapper.put(8, "Aug");
			monthMapper.put(9, "Sep");
			monthMapper.put(10, "Oct");
			monthMapper.put(11, "Nov");
			monthMapper.put(12, "Dec");
		}

		@Override
		protected void map(Object key, Text value, Mapper<Object, Text, Text, IntWritable>.Context context)
				throws IOException, InterruptedException {
			String[] split = value.toString().split(",");
			if (split.length > 4)
				return;
			if (split[1].equals("listing_id"))
				return;
			try {
				String date = split[1];
				Text keyOut = new Text(monthMapper.get(Integer.parseInt(split[1].split("-")[1])));
				IntWritable valOut = split[2].equals("t") ? new IntWritable(1) : new IntWritable(0);
				context.write(keyOut, valOut);
			} catch (Exception e) {
				System.out.println("Error parsing date" + e);
			}
		}

	}

	protected static class TrendReducer extends Reducer<Text, IntWritable, Text, FloatWritable> {

		@Override
		protected void reduce(Text arg0, Iterable<IntWritable> arg1,
				Reducer<Text, IntWritable, Text, FloatWritable>.Context arg2) throws IOException, InterruptedException {
			int totalListings = 0;
			int availableListings = 0;
			for (IntWritable v : arg1) {
				availableListings += v.get();
				totalListings++;
			}
			FloatWritable valOut = new FloatWritable(((float) availableListings / totalListings) * 100);
			arg2.write(arg0, valOut);
		}

	}

	protected static class TrendHbaseReducer extends TableReducer<Text, IntWritable, ImmutableBytesWritable> {

		@Override
		protected void setup(Reducer<Text, IntWritable, ImmutableBytesWritable, Mutation>.Context context)
				throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			super.setup(context);
		}

		@Override
		protected void reduce(Text keyIn, Iterable<IntWritable> values,
				Reducer<Text, IntWritable, ImmutableBytesWritable, Mutation>.Context context)
				throws IOException, InterruptedException {
			int totalListings = 0;
			int availableListings = 0;
			for (IntWritable v : values) {
				availableListings += v.get();
				totalListings++;
			}
			float valOut = ((float) availableListings / totalListings) * 100;

			Put putToCityTrends = new Put(Bytes.toBytes(context.getConfiguration().get("Place")));
			putToCityTrends.addColumn(Bytes.toBytes("CityTrend"), Bytes.toBytes(keyIn.toString()),
					Bytes.toBytes(valOut));
			context.write(null, putToCityTrends);
		}

		@Override
		protected void cleanup(Reducer<Text, IntWritable, ImmutableBytesWritable, Mutation>.Context context)
				throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			super.cleanup(context);
		}

	}

}
