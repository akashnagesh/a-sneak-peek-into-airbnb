package com.BigData.MapReduceAnalysis;

import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

/**
 * I ahve used Top ten patterns here. Also used SequenceFileOutputFormat between
 * jobs.
 * 
 * @author akashnagesh
 *
 */
public class TopTen {

	public static void main(String[] args) throws Exception {

		// TODO Auto-generated method stub
		try {
			Configuration conf = new Configuration();
			Job job = Job.getInstance(conf, "reviews-per-user");
			job.setJarByClass(TopTen.class);
			job.setMapperClass(ReviewsPerCustomerMapper.class);
			job.setReducerClass(ReviewsPerCustomerReducer.class);
			// job.setCombinerClass(ReducerWordCount.class);
			job.setOutputKeyClass(DoubleWritable.class);
			job.setOutputValueClass(IntWritable.class);

			// job.setOutputFormatClass(SequenceFileOutputFormat.class);

			FileInputFormat.addInputPath(job, new Path(args[0]));
			FileOutputFormat.setOutputPath(job, new Path(args[1]));

			job.waitForCompletion(false);

			Configuration conf2 = new Configuration();
			Job job2 = Job.getInstance(conf2, "to-20-reviews");
			job2.setJarByClass(TopTen.class);
			job2.setMapperClass(TopTenMapper.class);
			job2.setReducerClass(TopTenReducer.class);
			// job.setCombinerClass(ReducerWordCount.class);
			job2.setOutputKeyClass(DoubleWritable.class);
			job2.setOutputValueClass(IntWritable.class);
			job2.setMapOutputKeyClass(CustomKey.class);
			job2.setMapOutputValueClass(DoubleWritable.class);
			// job2.setInputFormatClass(SequenceFileInputFormat.class);

			job2.setOutputFormatClass(TextOutputFormat.class);

			FileInputFormat.addInputPath(job2, new Path(args[1]));
			FileOutputFormat.setOutputPath(job2, new Path(args[2]));

			job2.waitForCompletion(false);

			// cleanUpOutputDiectory(conf, args[1]);
			System.exit(0);
		} catch (InterruptedException e) {
			System.out.println(e);
		} catch (ClassNotFoundException e) {
			System.out.println(e);
		}
	}

	protected static class ReviewsPerCustomerMapper extends Mapper<Object, Text, DoubleWritable, IntWritable> {

		@Override
		protected void map(Object key, Text value, Context context) throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			String[] split = value.toString().split("\t");

			if (split.length != 6)
				return;
			try {
				double reviewerId = Double.parseDouble(split[3]);
				context.write(new DoubleWritable(reviewerId), new IntWritable(1));
			} catch (Exception e) {
				System.out.println(e);
			}

		}
	}

	protected static class ReviewsPerCustomerReducer
			extends Reducer<DoubleWritable, IntWritable, DoubleWritable, IntWritable> {

		@Override
		protected void reduce(DoubleWritable keyIn, Iterable<IntWritable> valueIn, Context context)
				throws IOException, InterruptedException {
			int count = 0;
			for (IntWritable i : valueIn) {
				count += i.get();
			}
			context.write(keyIn, new IntWritable(count));
		}

	}

	protected static class TopTenMapper extends Mapper<DoubleWritable, IntWritable, CustomKey, DoubleWritable> {

		@Override
		protected void map(DoubleWritable key, IntWritable value, Context context)
				throws IOException, InterruptedException {
			context.write(new CustomKey(value.get()), key);
		}

	}

	protected static class TopTenReducer extends Reducer<CustomKey, DoubleWritable, DoubleWritable, IntWritable> {

		static int numberOfUsers = 20;

		@Override
		protected void reduce(CustomKey arg0, Iterable<DoubleWritable> arg1,
				Reducer<CustomKey, DoubleWritable, DoubleWritable, IntWritable>.Context arg2)
				throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			if (numberOfUsers <= 20) {
				arg2.write(arg1.iterator().next(), new IntWritable(arg0.key));
				numberOfUsers++;
			}
		}

	}

}
